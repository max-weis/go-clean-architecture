// Package boundary provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package boundary

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
)

// Defines values for FindProductsParamsSort.
const (
	CreatedAsc   FindProductsParamsSort = "created_asc"
	CreatedDesc  FindProductsParamsSort = "created_desc"
	IdAsc        FindProductsParamsSort = "id_asc"
	IdDesc       FindProductsParamsSort = "id_desc"
	ModifiedAsc  FindProductsParamsSort = "modified_asc"
	ModifiedDesc FindProductsParamsSort = "modified_desc"
	None         FindProductsParamsSort = "none"
	TitleAsc     FindProductsParamsSort = "title_asc"
	TitleDesc    FindProductsParamsSort = "title_desc"
)

// Product defines model for Product.
type Product struct {
	// timestamp when the product was created
	CreatedAt   openapi_types.Date `json:"created_at"`
	Description string             `json:"description"`
	Id          string             `json:"id"`

	// timestamp when the product was last modified
	ModifiedAt openapi_types.Date `json:"modified_at"`

	// price of the product
	Price int `json:"price"`

	// title of the product
	Title string `json:"title"`
}

// ProductBase defines model for ProductBase.
type ProductBase struct {
	// description of the product
	Description string `json:"description"`

	// price of the product
	Price int `json:"price"`

	// title of the product
	Title string `json:"title"`
}

// ProductList defines model for ProductList.
type ProductList struct {
	// the current page
	Curr  string            `json:"curr"`
	Data  []ProductListItem `json:"data"`
	Limit int               `json:"limit"`

	// the next page
	Next   string `json:"next"`
	Offset int    `json:"offset"`

	// the previous page
	Prev *string `json:"prev,omitempty"`

	// number of products found in the page
	Products int `json:"products"`
}

// ProductListItem defines model for ProductListItem.
type ProductListItem struct {
	// timestamp when the product was created
	CreatedAt openapi_types.Date `json:"created_at"`

	// timestamp when the product was last modified
	ModifiedAt openapi_types.Date `json:"modified_at"`

	// price of the product
	Price int `json:"price"`

	// title of the product
	Title string `json:"title"`
}

// FindProductsParams defines parameters for FindProducts.
type FindProductsParams struct {
	// the number of products in a page
	Limit int `form:"limit" json:"limit"`

	// the page number
	Offset int `form:"offset" json:"offset"`

	// sort by
	Sort FindProductsParamsSort `form:"sort" json:"sort"`

	// filter all non-free products
	Free *bool `form:"free,omitempty" json:"free,omitempty"`
}

// FindProductsParamsSort defines parameters for FindProducts.
type FindProductsParamsSort string

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = ProductBase

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/product)
	FindProducts(w http.ResponseWriter, r *http.Request, params FindProductsParams)

	// (POST /v1/product)
	CreateProduct(w http.ResponseWriter, r *http.Request)

	// (GET /v1/product/{id})
	FindProduct(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FindProducts operation middleware
func (siw *ServerInterfaceWrapper) FindProducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindProductsParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sort"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "free" -------------
	if paramValue := r.URL.Query().Get("free"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "free", r.URL.Query(), &params.Free)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "free", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindProducts(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProduct(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindProduct operation middleware
func (siw *ServerInterfaceWrapper) FindProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindProduct(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/product", wrapper.FindProducts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/product", wrapper.CreateProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/product/{id}", wrapper.FindProduct)
	})

	return r
}
